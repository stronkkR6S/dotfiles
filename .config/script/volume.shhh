#!/bin/bash

# Temp files for notification persistence
VOL_ID_FILE="/tmp/volume_notification_id"
MIC_ID_FILE="/tmp/mic_notification_id"

# Function to send a notification
send_notification() {
    local LEVEL=$1
    local IS_MUTE=$2
    local LABEL=$3
    local ICON=$4
    local ID_FILE=$5

    [[ -f "$ID_FILE" ]] && NOTIF_ID=$(cat "$ID_FILE") || NOTIF_ID=0

    if [ "$IS_MUTE" = "true" ]; then
        TEXT="$LABEL muted"
        ICON="${ICON}-muted"
        VALUE=0
    else
        TEXT="$LABEL: ${LEVEL}%"
        VALUE=$LEVEL
    fi

    NEW_ID=$(notify-send -p -a "$LABEL" -r "$NOTIF_ID" -h int:value:"$VALUE" -i "$ICON" "$LABEL" "$TEXT")
    echo "$NEW_ID" > "$ID_FILE"
}

# Function to get volume and mute state
get_volume_info() {
    local TARGET=$1
    local VOL_INFO=$(wpctl get-volume "$TARGET")

    local IS_MUTED="false"
    [[ "$VOL_INFO" == *"[MUTED]"* ]] && IS_MUTED="true"

    local VOL_RAW=$(echo "$VOL_INFO" | grep -oP '\d+\.\d+')
    local VOL_PERCENT=$(awk "BEGIN {printf \"%d\", $VOL_RAW * 100}")

    echo "$VOL_PERCENT $IS_MUTED"
}

# Main control logic
case $1 in
    up)
        wpctl set-mute @DEFAULT_AUDIO_SINK@ 0
        wpctl set-volume -l 2.0 @DEFAULT_AUDIO_SINK@ 5%+
        ;;
    down)
        wpctl set-mute @DEFAULT_AUDIO_SINK@ 0
        wpctl set-volume -l 2.0 @DEFAULT_AUDIO_SINK@ 5%-
        ;;
    mute)
        wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
        ;;
    mic-up)
        wpctl set-mute @DEFAULT_AUDIO_SOURCE@ 0
        wpctl set-volume -l 2.0 @DEFAULT_AUDIO_SOURCE@ 5%+
        ;;
    mic-down)
        wpctl set-mute @DEFAULT_AUDIO_SOURCE@ 0
        wpctl set-volume -l 2.0 @DEFAULT_AUDIO_SOURCE@ 5%-
        ;;
    mic-mute)
        wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
        ;;
    *)
        echo "Usage: $0 {up|down|mute|mic-up|mic-down|mic-mute}"
        exit 1
        ;;
esac

# Handle speaker (sink) volume/mute notifications
if [[ "$1" =~ ^(up|down|mute)$ ]]; then
    read VOLUME IS_MUTED <<< $(get_volume_info @DEFAULT_AUDIO_SINK@)
    send_notification "$VOLUME" "$IS_MUTED" "Volume" "audio-volume" "$VOL_ID_FILE"
fi

# Handle mic (source) volume/mute notifications
if [[ "$1" =~ ^(mic-up|mic-down|mic-mute)$ ]]; then
    read MIC_VOL MIC_MUTED <<< $(get_volume_info @DEFAULT_AUDIO_SOURCE@)
    send_notification "$MIC_VOL" "$MIC_MUTED" "Microphone" "microphone-sensitivity" "$MIC_ID_FILE"
fi

